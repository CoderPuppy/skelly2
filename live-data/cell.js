// Generated by LiveScript 1.2.0
(function(){
  var Pointer, Base, Cell;
  Pointer = require('./pointer');
  Base = require('./base');
  Cell = (function(superclass){
    var prototype = extend$((import$(Cell, superclass).displayName = 'Cell', Cell), superclass).prototype, constructor = Cell;
    function Cell(val){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.val = val;
      Cell.superclass.call(this$);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._get = function(key){
      if (this.val instanceof Base) {
        return this.val._get(key);
      } else if (this.val != null) {
        return this.val[key];
      }
    };
    prototype.get = function(key, live){
      live == null && (live = true);
      if (key != null) {
        return new Pointer(this, key, live);
      } else {
        return this.val;
      }
    };
    prototype.set = function(key, val){
      if (arguments.length >= 2) {
        if (this.val instanceof Base) {
          return this.val.set(key, val);
        } else if (this.val != null) {
          return this.val[key] = val;
        } else {
          throw new Error('bad');
        }
      } else if (arguments.length >= 1) {
        if (key !== this.val) {
          this.emit('change', key, this.val);
          this.val = key;
        }
        return key;
      } else {
        throw new Error('Cell#set takes one or two arguments');
      }
    };
    return Cell;
  }(Base));
  module.exports = Cell;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
