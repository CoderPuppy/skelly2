// Generated by LiveScript 1.2.0
(function(){
  var Pointer, Base, KV;
  Pointer = require('./pointer');
  Base = require('./base');
  KV = (function(superclass){
    var prototype = extend$((import$(KV, superclass).displayName = 'KV', KV), superclass).prototype, constructor = KV;
    function KV(store){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.store = store != null
        ? store
        : {};
      this$.set = bind$(this$, 'set', prototype);
      this$.get = bind$(this$, 'get', prototype);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._get = function(key){
      return this.store[key];
    };
    prototype.get = function(key, live){
      live == null && (live = true);
      if (key != null) {
        return new Pointer(this, key, live);
      } else {
        return this.store;
      }
    };
    prototype.set = function(key, val){
      if (arguments.length >= 2) {
        if (val !== this.store[key]) {
          this.emit("change:" + key, val, this.store[key]);
          this.store[key] = val;
        }
        return val;
      } else if (arguments.length >= 1) {
        this.emit('change', val, this.store);
        return this.store = val;
      } else {
        throw new Error('KV#set takes one or two arguments');
      }
    };
    return KV;
  }(Base));
  module.exports = KV;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
