// Generated by LiveScript 1.2.0
(function(){
  var EE, Base;
  EE = require('events').EventEmitter;
  Base = (function(){
    Base.displayName = 'Base';
    var prototype = Base.prototype, constructor = Base;
    importAll$(prototype, arguments[0]);
    function Base(){
      var this$ = this;
      this.on('newListener', function(name, fn){
        if (name === 'change') {
          return fn(this$.get());
        }
      });
    }
    prototype.pipe = function(other){
      other.set(this.get());
      this.on('change', function(newVal){
        return other.set(newVal);
      });
      return other;
    };
    prototype.bind = function(other){
      return other.pipe(this).pipe(other);
    };
    prototype.map = function(fn){
      var other;
      other = require('./cell')();
      this.on('change', function(val){
        return other.set(fn(val));
      });
      return other;
    };
    return Base;
  }(EE.prototype));
  module.exports = Base;
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
