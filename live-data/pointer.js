// Generated by LiveScript 1.2.0
(function(){
  var Base, get, set, Pointer;
  Base = require('./base');
  get = function(pointer){
    if (pointer.kv instanceof Base) {
      return pointer.kv._get(pointer.key);
    } else {
      return pointer.kv[pointer.key];
    }
  };
  set = function(pointer, val){
    if (pointer.kv instanceof Base) {
      return pointer.kv.set(pointer.key, val);
    } else {
      return pointer.kv[pointer.key] = val;
    }
  };
  Pointer = (function(superclass){
    var prototype = extend$((import$(Pointer, superclass).displayName = 'Pointer', Pointer), superclass).prototype, constructor = Pointer;
    function Pointer(kv, key, live){
      var customEmit, oldEmit, this$ = this instanceof ctor$ ? this : new ctor$;
      this$.kv = kv;
      this$.key = key;
      this$.live = live;
      Pointer.superclass.call(this$);
      customEmit = function(){
        this$.emit.apply(this$, arguments);
        return oldEmit.call(this$.val);
      };
      this$.val = get(this$);
      if (this$.val != null && typeof this$.val.emit === 'function') {
        oldEmit = this$.val.emit;
        this$.val.emit = customEmit;
      }
      if (this$.kv instanceof Base) {
        this$.kv.on('change', function(){
          var newVal, oldVal, oldEmit;
          newVal = get(this$);
          oldVal = this$.val;
          if (oldVal != null && typeof oldVal.emit === 'function') {
            oldVal.emit = oldEmit;
          }
          if (newVal != null && typeof newVal.emit === 'function') {
            oldEmit = newVal.emit;
            newVal.emit = customEmit;
          }
          this$.val = newVal;
          if (newVal !== oldVal) {
            return this$.emit('change', newVal, oldVal);
          }
        });
        this$.kv.on("change:" + this$.key, function(newVal, oldVal){
          var oldEmit;
          if (oldVal != null && typeof oldVal.emit === 'function') {
            oldVal.emit = oldEmit;
          }
          if (newVal != null && typeof newVal.emit === 'function') {
            oldEmit = newVal.emit;
            newVal.emit = customEmit;
          }
          this$.val = newVal;
          return this$.emit('change', newVal, oldVal);
        });
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._get = function(key){
      if (this.val instanceof Base) {
        return this.val._get(key);
      } else {
        return this.val[key];
      }
    };
    prototype.get = function(key, live){
      live == null && (live = true);
      if (key != null) {
        return new Pointer(this, key, live);
      } else {
        return this.val;
      }
    };
    prototype.set = function(key, val){
      if (arguments.length >= 2) {
        if (this.val instanceof Base) {
          return this.val.set(key, val);
        } else if (this.val != null) {
          return this.val[key] = val;
        } else {
          throw new Error('nothing here yet');
        }
      } else if (arguments.length >= 1) {
        return set(this, val);
      } else {
        throw new Error('Pointer#set takes one or two arguments');
      }
    };
    return Pointer;
  }(Base));
  module.exports = Pointer;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
