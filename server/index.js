// Generated by LiveScript 1.2.0
(function(){
  var live, browserify, http, url, Server, RequestClient;
  live = require('../live-data');
  browserify = require('browserify');
  http = require('http');
  url = require('url');
  Server = (function(){
    Server.displayName = 'Server';
    var prototype = Server.prototype, constructor = Server;
    function Server(app, browserMain){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.app = app;
      this$.browserMain = browserMain;
      this$.httpServer = http.createServer(function(req, res){
        var templ, stream;
        req.parsedUrl = url.parse(req.url, true);
        if (req.parsedUrl.pathname === '/bundle.js') {
          return browserify(this$.browserMain).bundle({
            insertGlobals: true,
            detectGlobals: false,
            debug: true
          }).on('error', function(err){
            res.writeHead(500);
            return res.end(err.stack);
          }).once('data', function(){
            return res.writeHead(200, {
              'Content-Type': 'application/javascript'
            });
          }).pipe(res);
        } else {
          templ = this$.app.mainTemplate(new RequestClient(this$, req));
          res.writeHead(200, {
            'Content-Type': 'text/html'
          });
          stream = templ.stream();
          return stream.pipe(res);
        }
      });
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.listen = function(){
      var ref$;
      return (ref$ = this.httpServer).listen.apply(ref$, arguments);
    };
    return Server;
  }());
  RequestClient = (function(superclass){
    var prototype = extend$((import$(RequestClient, superclass).displayName = 'RequestClient', RequestClient), superclass).prototype, constructor = RequestClient;
    function RequestClient(server, req){
      this.server = server;
      RequestClient.superclass.call(this);
      this.set('app', this.server.app);
      this.set('url', req.parsedUrl || url.parse(req.url, true));
      this.get('url').get('query').bind(this.get('query'));
      console.log(req.headers);
    }
    return RequestClient;
  }(live.KV));
  Server.RequestClient = RequestClient;
  module.exports = Server;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
